#!/usr/bin/env node
// 7:02
const { exec } = require("child_process")

const url = "https://animehub.ac/watch/naruto-shippuuden-sub.37239?ep=";

const episode_ids = [
  "135532",
  "135358",
  "135250",
  "135082",
  "134908",
  "134733",
  "134730",
  "134517",
  "134346",
  "134213",
  "134067",
  "133837",
  "133650",
  "133221",
  "132910",
  "133359",
  "132571",
  "131948",
  "131718",
  "131534",
  "131261",
  "131022",
  "130753",
  "130541",
  "130540",
  "129827",
  "129573",
  "133360",
  "129130",
  "128945",
  "128655",
  "128415",
  "128044",
  "127537",
  "127277",
  "126777",
  "126556",
  "126365",
  "126160",
  "125988",
  "125845",
  "125426",
  "125194",
  "124935",
  "124796",
  "124527",
  "124103",
  "123827",
  "123662",
  "123358",
  "123054",
  "122724",
  "122554",
  "122394",
  "122275",
  "122058",
  "121895",
  "121322",
  "121003",
  "120733",
  "120433",
  "120167",
  "119837",
  "119515",
  "119118",
  "118557",
  "118234",
  "117907",
  "117504",
  "117117",
  "116843",
  "116585",
  "116463",
  "116467",
  "115702",
  "115102",
  "114309",
  "113653",
  "113657",
  "113079",
  "112663",
  "112054",
  "111762",
  "111439",
  "110639",
  "110202",
  "109857",
  "109263",
  "108402",
  "107858",
  "106584",
  "104911",
  "103072",
  "101857",
  "100684",
  "100685",
  "100683",
  "100682",
  "100681",
  "100680",
  "100679",
  "100678",
  "100677",
  "100676",
  "100675",
  "100674",
  "100673",
  "100672",
  "100671",
  "100670",
  "100669",
  "100668",
  "100667",
  "100666",
  "100665",
  "100664",
  "100663",
  "100662",
  "100661",
  "100660",
  "100659",
  "100658",
  "100657",
  "100656",
  "100655",
  "100654",
  "100653",
  "100652",
  "100651",
  "100650",
  "100649",
  "100648",
  "100647",
  "100646",
  "100645",
  "100644",
  "100643",
  "100642",
  "100641",
  "100640",
  "100639",
  "100638",
  "100637",
  "100636",
  "100635",
  "100634",
  "100633",
  "100632",
  "100631",
  "100630",
  "100629",
  "100628",
  "116029",
  "100627",
  "100626",
  "100625",
  "100624",
  "100623",
  "100622",
  "100621",
  "100620",
  "100619",
  "100618",
  "100617",
  "100616",
  "100615",
  "100614",
  "100613",
  "100612",
  "100611",
  "100610",
  "115756",
  "100609",
  "100608",
  "100607",
  "100606",
  "100605",
  "100604",
  "100603",
  "100602",
  "100601",
  "100600",
  "100599",
  "100598",
  "100597",
  "100596",
  "100595",
  "100594",
  "100593",
  "100592",
  "100591",
  "100590",
  "100589",
  "100588",
  "100587",
  "100586",
  "100585",
  "100584",
  "100583",
  "100582",
  "100581",
  "100580",
  "100579",
  "133446",
  "100577",
  "100576",
  "100575",
  "100574",
  "100573",
  "100572",
  "100571",
  "100570",
  "100569",
  "100568",
  "100567",
  "100566",
  "133445",
  "100564",
  "100563",
  "100562",
  "100561",
  "100560",
  "100559",
  "100558",
  "100557",
  "100556",
  "100555",
  "100554",
  "100553",
  "100552",
  "100551",
  "100550",
  "100549",
  "100548",
  "100547",
  "100546",
  "100545",
  "100544",
  "100543",
  "100542",
  "100541",
  "100540",
  "100539",
  "100538",
  "100537",
  "100536",
  "100535",
  "100534",
  "100533",
  "100532",
  "100531",
  "100530",
  "100529",
  "100528",
  "100527",
  "100526",
  "100525",
  "100524",
  "100523",
  "100522",
  "100521",
  "100520",
  "100519",
  "100518",
  "100517",
  "100516",
  "100515",
  "100514",
  "100513",
  "100512",
  "100511",
  "100510",
  "100509",
  "100508",
  "100507",
  "100506",
  "100505",
  "100504",
  "100503",
  "100502",
  "100501",
  "100500",
  "100499",
  "100498",
  "100497",
  "100496",
  "100495",
  "100494",
  "100493",
  "100492",
  "100491",
  "100490",
  "100489",
  "100488",
  "100487",
  "100486",
  "100485",
  "100484",
  "100483",
  "100482",
  "100481",
  "100480",
  "100479",
  "100478",
  "100477",
  "100476",
  "100475",
  "100474",
  "100473",
  "100472",
  "100471",
  "100470",
  "100469",
  "100468",
  "100467",
  "100466",
  "100465",
  "100464",
  "100463",
  "100462",
  "100461",
  "100460",
  "100459",
  "100458",
  "100457",
  "100456",
  "100455",
  "100454",
  "100453",
  "100452",
  "100451",
  "100450",
  "100449",
  "100448",
  "100447",
  "100446",
  "100445",
  "100444",
  "100443",
  "100442",
  "100441",
  "100440",
  "100439",
  "100438",
  "100437",
  "100436",
  "100435",
  "100434",
  "100433",
  "100432",
  "100431",
  "100430",
  "100429",
  "100428",
  "100427",
  "100426",
  "100425",
  "100424",
  "100423",
  "100422",
  "100421",
  "100420",
  "100419",
  "100418",
  "100417",
  "100416",
  "100415",
  "100414",
  "100413",
  "100412",
  "100411",
  "100410",
  "100409",
  "100408",
  "100407",
  "100406",
  "100405",
  "100404",
  "100403",
  "100402",
  "100401",
  "100400",
  "100399",
  "100398",
  "100397",
  "100396",
  "100395",
  "100394",
  "100393",
  "100392",
  "100391",
  "100390",
  "100389",
  "100388",
  "100387",
  "100386",
  "100385",
  "100384",
  "100383",
  "100382",
  "100381",
  "100380",
  "100379",
  "100378",
  "100377",
  "100376",
  "100375",
  "100374",
  "100373",
  "100372",
  "100371",
  "100370",
  "100369",
  "100368",
  "100367",
  "100366",
  "100365",
  "100364",
  "100363",
  "100362",
  "100361",
  "100360",
  "100359",
  "100358",
  "100357",
  "100356",
  "100355",
  "100354",
  "100353",
  "100352",
  "100351",
  "100350",
  "100349",
  "100348",
  "100347",
  "100346",
  "100345",
  "115755",
  "100344",
  "100343",
  "100342",
  "115754",
  "100341",
  "100340",
  "100339",
  "100338",
  "100337",
  "100336",
  "115753",
  "100335",
  "100334",
  "100333",
  "100332",
  "100331",
  "100330",
  "115752",
  "100329",
  "100328",
  "100327",
  "100326",
  "100325",
  "100324",
  "100323",
  "100322",
  "100321",
  "100320",
  "100319",
  "100318",
  "100317",
  "115751",
  "100316",
  "115750",
  "100315",
  "100314",
  "100313",
  "100312",
  "115749",
  "100311"
]

// episode = null;

// if (process.argv[2]) {
//   episode = process.argv[2]
// } else {
//   console.log("episode no: ")
//   getStandardInputStream().then((val) => {
//   })
// }

async function getEpisodeFromStdin() {
  const readline = require("readline")
  rl = readline.createInterface({input:process.stdin, output:process.stdout, terminal:true});
  rl.question("episode no: ", (episode_no) => {
    return episode_no;
  })
}

async function main() {
  episode = process.argv[2] || await getEpisodeFromStdin();
  ep_id = episode_ids[episode_ids.length - Number(episode)]

  watch_url = url + ep_id;

  const command = `start chrome ${watch_url}`

  exec(command, (err, stdout, stderr) => {
    if (stderr) console.error(stderr);
    else {
      console.log(`command: ${command}\ncommand successful`)
      process.exit()
    } 
  });
}

main()
// episode = process.argv[2] || await getStandardInputStream();





// function getStandardInputStream(stopOnReadline) {
//   return new Promise((resolve, reject) => {
//     // if (process.stdin.isTTY) {
//     //   return undefined;
//     // }
//     process.stdin.resume();
//     process.stdin.setEncoding("utf8");

//     let data = "";
//     let chunk;
//     // process.stdin.on("data", function (chunk) {
//     //  data += chunk;
//     // });
//     process.stdin.on("readable", function () {
//       if ((chunk = process.stdin.read()) !== null) data += chunk;
//       if (stopOnReadline) {
//         if (chunk.endsWith("\n")) {
//           process.stdin.end();
//         }
//       }
//     });
//     process.stdin.on("end", function () {
//       process.stdin.pause();
//       resolve(data);
//     });
//     process.stdin.on("error", function (err) {
//       reject(err);
//     });
//   });
// }

// async function lolgetStandardInputStream() {
//     if (process.stdin.isTTY) {
//       return undefined;
//     }
//     process.stdin.resume();
//     process.stdin.setEncoding("utf8");

//     let data = "";
//     let chunk;
//     // process.stdin.on("data", function (chunk) {
//     //  data += chunk;
//     // });
//     process.stdin.on("readable", function () {
//       if ((chunk = process.stdin.read()) !== null) data += chunk;
//     });
//     process.stdin.on("end", function () {
//       resolve(data);
//     });
//     process.stdin.on("error", function (err) {
//       reject(err);
//     });
// }